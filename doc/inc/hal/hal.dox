/*********************************************************************************************//**
 * @file
 * @defgroup    hal_intf Hardware Abstraction Layer (HAL) interface
 ****************************************************************************************//** @{ */
/**
 * @defgroup    hal_uart UART modul
 */
/**
 * @defgroup    hal_int Interrupt kontroler modul
 */
/**
 * @defgroup    hal_gpio GPIO modul
 */
/**
 * @defgroup    hal_crc CRC modul
 */
/**
 * @defgroup    hal_cpu CPU modul
 */
/**
 * @defgroup    hal_compiler C Compiler
 */
/**
@section        hal_intro Hardware Abstraction Layer

U ovom odeljku je predstavljena specifikacija Hardware Abstraction Layer (HAL) 
modula. HAL vrsi apstrakciju procesorske arhitekture i/ili platforme na nivo 
dovoljan da sistem koji koristi eSolid pakete bude prebaceno (port) na tu 
platformu.

@section        hal_principles Osnovna nacela

HAL implementacija je vodjena sledecim osnovnim nacelima:
- HAL je implementiran u C-u i asembleru.
- Interfejs je pisan pomocu C makroa. Ovo omogucava da se interfejs implementira 
kao C funkcija, asembler ili poziv na eksterne C ili asembler funkcije. Time se 
postize odabir najefikasnije implementacije bez promene interfejsa.
- HAL pruza jednostavan, portabilan interfejs za manipulaciju sa hardverom 
sirokog spektra. Programeru se uvek ostavlja mogucnost da se HAL zaobidje i vrsi 
direktan pristup hardveru. Ovakav nacin rada nije preporucljiv jer se smanjuje 
portabilnost koda.

@section     hal_interface HAL interfejs

HAL interfejs je podeljen u nekoliko celina gde svaka celina opsluzuje jedan 
hardverski modul. Jedna celina cini drajver datog hardverskog modula. Svaki 
drajver ima interfejs koji je kreiran u skladu sa odredjenim smernicama.

Opsta struktura podataka drajvera je sledeca:
- nepromenljivi, privatni podaci,
- nepromenljivi, javni podaci,
- promenljivi, privatni podaci,
- promenljivi, javni podaci.

<b>Nepromenljivi, privatni podaci</b> se koriste za identifikaciju hardverskog 
modula. Tako, na primer, postoje esGPIOA, esGPIOB, esUART0, esUART1, esUART2 
struktrure koje se koriste prilikom pozivanja inicijalizacione funkcije. Atribut 
@c "nepromenljivi" kazuje da su podaci smesteni u ROM/FLASH memoriji, a atribut 
@c "privatni" se koristi jer korisnik nema dojam o strukturi podataka. Ova 
struktura se krace zove <b> identifikaciona struktura </b>.

<b>Nepromenljivi, javni podaci</b> se koriste za definisanje rada drajver modula. 
U ovu strukturu podataka korisnik upisuje zeljene atribute drajver modula. 
Prilikom inicijalizacije drajver se konfigurise prema definiciji koja je 
navedena u strukturi. Ova struktura se nalazi u ROM/FLASH memoriji i naziva se 
<b> definiciona struktura </b>.

<b>Promenljivi, privatni podaci</b> su smesteni u RAM memoriju, cuvaju stanje 
drajvera i ostale podatke o hardveru. Korisnik nema direktan pristup ovim 
podacima, osim preko definisanog interfejsa.

<b>Promenljivi, javni podaci</b> se, takodje, cuvaju u RAM memoriju, struktura 
je poznata korisniku i moze da izvrsi pristup njima. U ovu strukturu se cuva 
barem identifikator hardverskog modula koji se upotrebljava. Ova struktura se 
naziva <b> upravljacka struktura </b>.

U zavisnosti od implementacije, ne mora svaki drajver da poseduje sve pomenute 
strukture podataka, ali svaki drajver mora minimalno da ima identifikacione 
strukture koje se koriste prilikom inicijalizacije.

@subsection     hal_interface_init Inicijalizacija drajvera

Inicijalizacija se u opstem slucaju vrsi u nekoliko koraka:
1. Instaciranje struktrure promenljivih javnih podataka, odnosno, upravljacke
strukture podataka,
2. instaciranje strukture nepromenljivih, javnih podataka, odnosno, definicione 
strukture,
3. poziva se funkcija za inicijalizaciju kojoj se predaje:
- identifikaciona struktura,
- definiciona struktura podataka i
- upravljacka struktura.

Instanca strukture promenljivih, javnih podataka se koristi kao identifikator
drajvera za hardver koji se koriste za sve druge funkcije.

@subsection     hal_interface_usage Upotreba drajvera

Nakon inicijalizacije mogu se pozivati funkcije drajvera. Svim funkcija se
predaje instanca strukture promenljivih, javnih podataka kako bi funkcija 
odredila sa kojim hardverskim modulom se radi.

@subsection     hal_interface_deinit Zavrsetak rada sa drajverom

Za prestanak rada sa drajverom dovoljno je pozvati DeInit funkciju koja ce 
izvrsiti prebacivanje hardvera u rezim male potrosnje, ukoliko to podrzava.

@section        hal_structure Struktura HAL

HAL se sastoji iz tri klasa. U sledecoj tabeli prikazani su kratki opisi klasa:
<table>
<tr>
    <td><b>HAL klasa</b></td>
    <td><b>Opis</b></td>
    <td><b>Funkcija</b></td>
</tr>
<tr>
    <td>Arhitektura HAL</td>
    <td>Funkcionalnost koja je vezana za jednu arhitekturu procesora u kombinaciji sa izabranim kompajlerom. Deo funkcionalnosti moze biti redefinisana u Varijant HAL.</td>
    <td>Debug funkcionalnost specificna za arhitekturu, definicije vektora prekida i izuzetaka i njihovih rutina, makroi konteksta, sistemska inicijalizacija</td>
</tr>
<tr>
    <td>Varijanta HAL</td>
    <td>Neke procesorske arhitekture dolaze u nekoliko varijanti, na primer MIPS dolazi u 32 i 64 bita, a neki procesori imaju i dodatne module.</td>
    <td>Varijanta HAL prosiruje funkcionalnost Arhitektura HAL-a, konfiguracione opcije, drajveri za dodatne module.</td>
</tr>
    <tr>
    <td>Platforma HAL</td>
    <td>Sadrzi funkcionalnost i konfiguracione opcije vezane za platformu.</td>
    <td>Prva inicijalizacija hardvera, specifikacija memorijske strukture, konfiguracione opcije (brzina procesora, opcije kompajlera), debug IO funkcije.</td>
</tr>
</table>
 *//** @} *//*************************************************************************************/
